import asyncio
import html
from aiogram import Bot, Dispatcher, types, F
from playwright.async_api import async_playwright
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    BotCommand,
)
from ai_api import (
    extract_hs_code,
    check_description_sufficiency,
    get_keywords,
    analyze_parsed_results2,
)
from parser2 import (
    parse_ifcg,
    parse_tnved_tree,
    fetch_tks_explanation,
    fetch_examples,
    parse_tks_info2,
)
from database import (
    get_user,
    update_access,
    check_and_update_trial,
    log_query,
    get_analytics_data,
)
from dotenv import load_dotenv
import os
import ast
from database import init_db
import logging

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_IDS = ast.literal_eval(os.getenv("ADMIN_IDS", "set()"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

user_context = {}

cache_explanation = {}

PLAYWRIGHT = None
BROWSER = None


# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
async def init_browser():
    global PLAYWRIGHT, BROWSER
    PLAYWRIGHT = await async_playwright().start()
    BROWSER = await PLAYWRIGHT.chromium.launch(headless=True)


# –∑–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
async def shutdown_browser():
    await PLAYWRIGHT.stop()


@dp.message(CommandStart())
async def start(message: types.Message):
    user_context.pop(message.from_user.id, None)
    await message.answer(
        "üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–¥–∞ –¢–ù –í–≠–î:",
        reply_markup=new_query_kb,
    )


@dp.message(Command("analytics"))
async def cmd_analytics(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    data = get_analytics_data()
    text = (
        "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        "üßë‚Äçüíª *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {data['total_users']}\n"
        f"   ‚Ä¢ –ù–æ–≤—ã—Ö (24¬†—á): {data['new_users_24h']}\n"
        f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7¬†–¥–Ω): {data['active7']}\n\n"
        "üîç *–ó–∞–ø—Ä–æ—Å—ã:*\n"
        f"   ‚Ä¢ –ü–æ–¥–±–æ—Ä –∫–æ–¥–∞ –¢–ù –í–ï–î: {data['code_total']}\n"
        f"   ‚Ä¢ –¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {data['duty_total']}\n"
        f"   ‚Ä¢ –î–µ—Ä–µ–≤–æ: {data['tree_total']}\n"
        f"   ‚Ä¢ –ü–æ—è—Å–Ω–µ–Ω–∏—è: {data['explanations_total']}\n"
        f"   ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: {data['examples_total']}"
    )

    await message.reply(text, parse_mode="Markdown")


@dp.message(Command("newrequest"))
async def cmd_newrequest(message: types.Message):
    user_context.pop(message.from_user.id, None)
    await message.answer("üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–¥–∞ –¢–ù –í–≠–î:")
    return


@dp.message(F.text)
async def handle_description(message: types.Message):
    user_id = message.from_user.id
    description = message.text

    if description == "üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å":
        user_context.pop(user_id, None)
        await message.answer("üì¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–æ–¥–∞ –¢–ù –í–≠–î:")
        return

    if description == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
        await user_profile(message)
        return

    msg = await message.answer("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...")

    sufficient, reply = await check_description_sufficiency(
        description, user_context.get(user_id)
    )

    if not sufficient:
        user_context[user_id] = user_context.get(user_id, []) + [
            {"role": "user", "content": description},
            {"role": "assistant", "content": reply},
        ]
        await msg.edit_text(f"‚ùì {reply}")
        return

    if sufficient:
        await msg.edit_text("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–µ. –§–æ—Ä–º–∏—Ä—É—é –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞...")

    user_messages = []

    if user_context.get(user_id):
        user_messages = [
            msg["content"] for msg in user_context[user_id] if msg["role"] == "user"
        ]  # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_messages.append(description)

    full_user_input = " ".join(user_messages)  # –°–∫–ª–µ–∏–≤–∞–µ–º –∏—Ö –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç

    keywords = await get_keywords(full_user_input)

    logger.info(full_user_input)
    logger.info(keywords)

    await msg.edit_text(
        f"üîé –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {keywords.replace('+', ', ')}"
    )

    while True:
        try:
            parsed_data = await parse_ifcg(keywords)
            # –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–≤–æ–µ–≥–æ —É—Å–ª–æ–≤–∏—è
            if parsed_data:  # –∑–∞–º–µ–Ω–∏ –Ω–∞ –Ω—É–∂–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ
                break

            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
            keywords = "+".join(keywords.split("+")[:-1])
            logger.info(keywords)
            # –ï—Å–ª–∏ —É–∂–µ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
            if not keywords:
                break
        except RuntimeError as e:
            # –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫.")
            user_context.pop(user_id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        except Exception as e:
            # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
            user_context.pop(user_id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

    if not parsed_data:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –¥—Ä—É–≥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º"
        )
        user_context.pop(user_id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return

    await msg.edit_text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    final_result = await analyze_parsed_results2(full_user_input, parsed_data)

    hs_code = extract_hs_code(final_result) if extract_hs_code(final_result) else None

    log_query(message.from_user.id, "code")

    markup = (
        InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìë –£–∑–Ω–∞—Ç—å —Ç–∞–º–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏",
                        callback_data=f"duty:{hs_code}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìö –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ä–µ–≤–æ –¢–ù –í–≠–î",
                        callback_data=f"tree:{hs_code}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìò –ü–æ—è—Å–Ω–µ–Ω–∏—è –∫ –¢–ù –í–≠–î",
                        callback_data=f"explan:{hs_code}",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìù –ü—Ä–∏–º–µ—Ä—ã –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è",
                        callback_data=f"examples:{hs_code}",
                    )
                ],
            ]
        )
        if hs_code
        else None
    )

    user_context.pop(user_id, None)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

    await msg.edit_text(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{final_result}", reply_markup=markup)


@dp.callback_query(F.data.startswith("duty:"))
async def show_duty(call: types.CallbackQuery):
    hs_code = call.data.split(":")[1]

    has_access, attempts_left = check_and_update_trial(
        call.from_user.id, call.from_user.username
    )

    if not has_access:
        await call.answer(
            "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            show_alert=True,
        )
        return

    try:
        await call.answer()
    except Exception:
        pass

    wait_msg = await call.message.reply(
        "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ñ–¥–∏—Ç–µ"
    duty = await parse_tks_info2(BROWSER, hs_code)
    await wait_msg.edit_text(
        f"üìå *–ö–æ–¥ –¢–ù –í–≠–î:* {hs_code}\n{duty}",
        parse_mode="Markdown",
    )

    log_query(call.from_user.id, "duty")


@dp.callback_query(F.data.startswith("tree:"))
async def show_tnved_tree(call: types.CallbackQuery):
    hs_code = call.data.split(":")[1]

    has_access, attempts_left = check_and_update_trial(
        call.from_user.id, call.from_user.username
    )

    if not has_access:
        await call.answer(
            "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            show_alert=True,
        )
        return

    tree_text = await parse_tnved_tree(hs_code)

    await call.message.reply(
        tree_text, reply_markup=new_query_kb, parse_mode="Markdown"
    )

    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    log_query(call.from_user.id, "tree")


@dp.callback_query(F.data.startswith("explan:"))
async def show_tnved_explanation(call: types.CallbackQuery):
    hs_code = call.data.split(":")[1]

    has_access, attempts_left = check_and_update_trial(
        call.from_user.id, call.from_user.username
    )

    if not has_access:
        await call.answer(
            "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            show_alert=True,
        )
        return

    pages = await fetch_tks_explanation(hs_code)
    if not pages:
        await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—è—Å–Ω–µ–Ω–∏–µ.")
        return

    cache_explanation[call.from_user.id] = {"code": hs_code, "pages": pages}

    await send_page(call, hs_code, pages, 0)

    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    log_query(call.from_user.id, "explanations")


@dp.callback_query(F.data.startswith("examples:"))
async def show_examles(call: types.CallbackQuery):
    hs_code = call.data.split(":")[1]

    has_access, attempts_left = check_and_update_trial(
        call.from_user.id, call.from_user.username
    )

    if not has_access:
        await call.answer(
            "‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.",
            show_alert=True,
        )
        return

    examples_text = await fetch_examples(hs_code)
    safe_text = html.escape(examples_text)
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫–∏–µ‚Äë—Ç–æ —Ç–µ–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <b>), –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ:
    safe_text = safe_text.replace("&lt;b&gt;", "<b>").replace("&lt;/b&gt;", "</b>")
    if not examples_text:
        await call.message.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –¥–µ–∫–ª–∞—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=new_query_kb,
        )
        return
    await call.message.reply(safe_text, reply_markup=new_query_kb, parse_mode="HTML")

    await call.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
    log_query(call.from_user.id, "examples")


async def send_page(message_or_cb, code, pages, index, get=True):
    total = len(pages)
    page_text = f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {index + 1}/{total}\n\n{pages[index]}"

    buttons = []
    if index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"tnved:{code}:{index - 1}"
            )
        )
    if index < total - 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"tnved:{code}:{index + 1}"
            )
        )

    markup = InlineKeyboardMarkup(inline_keyboard=[buttons] if buttons else [])

    if isinstance(message_or_cb, types.CallbackQuery):
        if get:
            await message_or_cb.message.reply(page_text, reply_markup=markup)
        else:
            await message_or_cb.message.edit_text(page_text, reply_markup=markup)
        await message_or_cb.answer()
    else:
        await message_or_cb.answer(page_text, reply_markup=markup)


@dp.callback_query(F.data.startswith("tnved:"))
async def tnved_pagination(call: types.CallbackQuery):
    _, code, index_str = call.data.split(":")
    index = int(index_str)
    pages = cache_explanation.get(call.from_user.id, {}).get("pages")

    if not pages:
        await call.answer("‚ùó –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É.")
        return

    await send_page(call, code, pages, index, False)


@dp.callback_query(F.data == "buy_full_access")
async def buy_full_access(call: types.CallbackQuery):
    update_access(call.from_user.id, True)
    await call.message.edit_text("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


new_query_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîÑ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")],
        # [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
    ],
    resize_keyboard=True,
)


async def user_profile(message: types.Message):
    user = get_user(message.from_user.id, message.from_user.username)
    full_access = "‚úÖ –û—Ç–∫—Ä—ã—Ç" if user[2] else "‚ùå –ó–∞–∫—Ä—ã—Ç"
    trial_attempts = user[3]

    markup = (
        InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø", callback_data="buy_full_access"
                    )
                ]
            ]
        )
        if not user[2]
        else None
    )

    await message.answer(
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:*\n\n"
        f"üìå *–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø:* {full_access}\n"
        f"üéüÔ∏è *–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø :* {trial_attempts}",
        reply_markup=markup,
        parse_mode="Markdown",
    )


async def set_bot_commands(bot):
    commands = [
        BotCommand(command="newrequest", description="–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"),
    ]
    await bot.set_my_commands(commands)


async def main():
    init_db()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_browser()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
    await set_bot_commands(bot)
    try:
        # –ü–æ–π–¥—ë–º –≤ –≤–µ—á–Ω—ã–π polling
        await dp.start_polling(bot)
    except (asyncio.CancelledError, KeyboardInterrupt, SystemExit):
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –≤ —Å–ª—É—á–∞–µ CTRL+C –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        pass
    finally:
        await shutdown_browser()  # –æ—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await bot.session.close()  # –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp –≤–Ω—É—Ç—Ä–∏ Bot


if __name__ == "__main__":
    asyncio.run(main())
